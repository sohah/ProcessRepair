(*
[p1 = (true -> ((System_On => (out_Highest_Level_Alarm >= 1)) and ((out_Highest_Level_Alarm <= 4) and (out_Highest_Level_Alarm <= 4))));]
[p1 = (true -> ((System_On => Door_Open) => (out_Highest_Level_Alarm <= 4)));]
[p1 = (true -> ((System_On and Door_Open) or (out_Highest_Level_Alarm <= 4)));]
*)


[p1 = (true -> true);]
[p1 = (true -> (((out_Highest_Level_Alarm <= 4) and (out_Highest_Level_Alarm <= 4)) and ((out_Highest_Level_Alarm <= 4) and (out_Highest_Level_Alarm <= 4))));]
[p1 = (true -> ((System_On => (out_Highest_Level_Alarm >= 1)) and ((out_Highest_Level_Alarm <= 4) and (out_Highest_Level_Alarm <= 4))));] -- (A) provides a lower bound for alarm level when System is On

[p1 = (true -> true);]
[p1 = (true -> (((out_Highest_Level_Alarm <= 4) and (out_Highest_Level_Alarm <= 4)) and ((out_Highest_Level_Alarm <= 4) and (out_Highest_Level_Alarm <= 4))));]
[p1 = (true -> (((out_Highest_Level_Alarm >= 1) or (not System_On)) xor (false xor (out_Highest_Level_Alarm > 4))));] -- Equivalent to (A)

[p1 = (true -> true);]
[p1 = (true -> (((out_Highest_Level_Alarm <= 4) and (out_Highest_Level_Alarm <= 4)) and ((out_Highest_Level_Alarm <= 4) and (out_Highest_Level_Alarm <= 4))));]
[p1 = (true -> ((System_On => (out_Highest_Level_Alarm >= 1)) and ((out_Highest_Level_Alarm <= 4) and (out_Highest_Level_Alarm <= 4))));] ---- (A) again

[p1 = (true -> true);]
[p1 = (true -> (((out_Highest_Level_Alarm <= 4) and (out_Highest_Level_Alarm <= 4)) and ((out_Highest_Level_Alarm <= 4) and (out_Highest_Level_Alarm <= 4))));]
[p1 = (true -> ((false xor (out_Highest_Level_Alarm <= 4)) and ((not System_On) or (out_Highest_Level_Alarm >= 1))));] -- Equivalent to (A)

[p1 = (true -> true);]
[p1 = (true -> (((out_Highest_Level_Alarm <= 4) and (out_Highest_Level_Alarm <= 4)) and ((out_Highest_Level_Alarm <= 4) and (out_Highest_Level_Alarm <= 4))));]
[p1 = (true -> (((not System_On) or (out_Highest_Level_Alarm >= 1)) and ((out_Highest_Level_Alarm <= 4) xor false)));] --- Equivalent to (A)

[p1 = (true -> true);]
[p1 = (true -> (((out_Highest_Level_Alarm <= 4) and (out_Highest_Level_Alarm <= 4)) and ((out_Highest_Level_Alarm <= 4) and (out_Highest_Level_Alarm <= 4))));]
[p1 = (true -> (((out_Highest_Level_Alarm >= 1) or (not System_On)) and ((out_Highest_Level_Alarm <= 4) and (out_Highest_Level_Alarm <= 4))));]

[p1 = (true -> (false => (out_Highest_Level_Alarm >= 3)));]  -- Not useful

[p1 = (true -> (false => (out_Highest_Level_Alarm >= 3)));] -- Not useful

[p1 = (true -> (((not Door_Open) and Door_Open) => (out_Highest_Level_Alarm >= 3)));] -- Not useful





[p1 = (true -> ((System_On => Door_Open) => (out_Highest_Level_Alarm <= 4)));] --(B) Tighter than (A), it brings in the notion of Door_Open dependency.



[p1 = (true -> ((System_On and Door_Open) or (out_Highest_Level_Alarm <= 4)));] -- (C)


[p1 = (true -> true);]
[p1 = (true -> (((out_Highest_Level_Alarm <= 4) and (out_Highest_Level_Alarm <= 4)) and ((out_Highest_Level_Alarm <= 4) and (out_Highest_Level_Alarm <= 4))));]
[p1 = (true -> (((out_Highest_Level_Alarm <= 4) xor false) xor ((out_Highest_Level_Alarm < 1) and System_On)));]



[p1 = (true -> (((out_Highest_Level_Alarm > 4) => (out_Highest_Level_Alarm = 2)) => ((out_Highest_Level_Alarm <= 2) => (out_Highest_Level_Alarm <= 4))));]
[p1 = (true -> (((out_Highest_Level_Alarm <= 4) and (out_Highest_Level_Alarm <= 4)) and ((not Door_Open) => (not Door_Open))));]
[p1 = (true -> (((out_Highest_Level_Alarm > 4) and (out_Highest_Level_Alarm > 4)) xor ((out_Highest_Level_Alarm < 1) => (not System_On))));]

[p1 = (true -> true);]
[p1 = (true -> (((out_Highest_Level_Alarm <= 4) and (out_Highest_Level_Alarm <= 4)) and ((out_Highest_Level_Alarm <= 4) and (out_Highest_Level_Alarm <= 4))));]
[p1 = (true -> (((not System_On) => (out_Highest_Level_Alarm > 4)) => ((out_Highest_Level_Alarm < 1) xor (out_Highest_Level_Alarm <= 4))));]


[p1 = (true -> true);]
[p1 = (true -> (((out_Highest_Level_Alarm <= 4) and (out_Highest_Level_Alarm <= 4)) and ((out_Highest_Level_Alarm <= 4) and (out_Highest_Level_Alarm <= 4))));]
[p1 = (true -> (((out_Highest_Level_Alarm < 1) => (not System_On)) and ((out_Highest_Level_Alarm = 4) xor (out_Highest_Level_Alarm <= 3))));]


[p1 = (true -> (((not System_On) xor (not System_On)) => (out_Highest_Level_Alarm >= 3)));]


[p1 = (true -> (((not System_On) xor (not System_On)) => (out_Highest_Level_Alarm >= 3)));]




[p1 = (true -> ((System_On and (0 = 0)) => (out_Highest_Level_Alarm <= 4)));]


[p1 = (true -> true);]
[p1 = (true -> (((out_Highest_Level_Alarm <= 4) and (out_Highest_Level_Alarm <= 4)) and ((out_Highest_Level_Alarm <= 4) and (out_Highest_Level_Alarm <= 4))));]
[p1 = (true -> (((not System_On) => (out_Highest_Level_Alarm > 4)) => ((out_Highest_Level_Alarm < 1) xor (out_Highest_Level_Alarm <= 4))));]

[p1 = (true -> true);]
[p1 = (true -> (((out_Highest_Level_Alarm <= 4) and (out_Highest_Level_Alarm <= 4)) and ((out_Highest_Level_Alarm <= 4) and (out_Highest_Level_Alarm <= 4))));]
[p1 = (true -> (((out_Highest_Level_Alarm < 1) => (not System_On)) and ((out_Highest_Level_Alarm = 4) xor (out_Highest_Level_Alarm <= 3))));]

[p1 = (true -> true);]
[p1 = (true -> (((out_Highest_Level_Alarm <= 4) and (out_Highest_Level_Alarm <= 4)) and ((out_Highest_Level_Alarm <= 4) and (out_Highest_Level_Alarm <= 4))));]
[p1 = (true -> (((not System_On) => (out_Highest_Level_Alarm > 4)) => ((out_Highest_Level_Alarm < 1) xor (out_Highest_Level_Alarm <= 4))));]

[p1 = (true -> true);]
[p1 = (true -> (((out_Highest_Level_Alarm <= 4) and (out_Highest_Level_Alarm <= 4)) and ((out_Highest_Level_Alarm <= 4) and (out_Highest_Level_Alarm <= 4))));]
[p1 = (true -> (((out_Highest_Level_Alarm < 1) => (not System_On)) and ((out_Highest_Level_Alarm = 4) xor (out_Highest_Level_Alarm <= 3))));]

[p1 = (true -> (((not System_On) xor (not System_On)) => (out_Highest_Level_Alarm >= 3)));]

[p1 = (true -> (((not System_On) xor (not System_On)) => (out_Highest_Level_Alarm >= 3)));]


[p1 = (true -> ((System_On and System_On) => (out_Highest_Level_Alarm <= 4)));]

[p1 = (true -> (((out_Highest_Level_Alarm < 1) or (not Door_Open)) or (Door_Open and Door_Open)));]
[p1 = (true -> (((out_Highest_Level_Alarm <= 4) and (out_Highest_Level_Alarm <= 4)) and ((out_Highest_Level_Alarm <= 4) and (out_Highest_Level_Alarm <= 4))));]
[p1 = (true -> ((System_On => (out_Highest_Level_Alarm >= 1)) and ((out_Highest_Level_Alarm <= 4) and (out_Highest_Level_Alarm <= 4))));]

[p1 = (true -> (((out_Highest_Level_Alarm < 1) or (not Door_Open)) or (Door_Open and Door_Open)));]
[p1 = (true -> (((out_Highest_Level_Alarm <= 4) and (out_Highest_Level_Alarm <= 4)) and ((out_Highest_Level_Alarm <= 4) and (out_Highest_Level_Alarm <= 4))));]
[p1 = (true -> ((System_On => (out_Highest_Level_Alarm >= 1)) and ((out_Highest_Level_Alarm <= 4) and (out_Highest_Level_Alarm <= 4))));]

[p1 = (true -> true);]
[p1 = (true -> (((out_Highest_Level_Alarm = 3) => (out_Highest_Level_Alarm = 3)) and ((out_Highest_Level_Alarm <= 4) and (out_Highest_Level_Alarm <= 4))));]
[p1 = (true -> (((not System_On) or (out_Highest_Level_Alarm >= 1)) and ((out_Highest_Level_Alarm <= 4) and (out_Highest_Level_Alarm <= 4))));]

[p1 = (true -> true);]
[p1 = (true -> (((out_Highest_Level_Alarm <= 4) and (out_Highest_Level_Alarm <= 4)) and ((out_Highest_Level_Alarm <= 4) and (out_Highest_Level_Alarm <= 4))));]
[p1 = (true -> ((System_On and (out_Highest_Level_Alarm < 1)) xor (not (out_Highest_Level_Alarm > 4))));]

[p1 = (true -> true);]
[p1 = (true -> (((out_Highest_Level_Alarm <= 4) and (out_Highest_Level_Alarm <= 4)) and ((out_Highest_Level_Alarm <= 4) and (out_Highest_Level_Alarm <= 4))));]
[p1 = (true -> (((out_Highest_Level_Alarm >= 1) or (not System_On)) and ((out_Highest_Level_Alarm <= 4) and (out_Highest_Level_Alarm <= 4))));]

[p1 = (true -> (false => (out_Highest_Level_Alarm < 3)));]

[p1 = (true -> (false => (out_Highest_Level_Alarm <= 3)));]

[p1 = (true -> (false => (out_Highest_Level_Alarm > 3)));]

[p1 = (true -> (false => (out_Highest_Level_Alarm = 3)));]

[p1 = (true -> ((Door_Open xor Door_Open) => (out_Highest_Level_Alarm <> 3)));]




[p1 = (true -> ((System_On and Door_Open) => (out_Highest_Level_Alarm <= 4)));]


