node main(
  Commanded_Flow_Rate : int;
  Current_System_Mode : int;
  System_On : bool;
  System_Monitor_Failed : bool;
  Logging_Failed : bool;
  Infusion_Initiate : bool;
  Disable_Audio : int;
  Notification_Cancel : bool;
  VTBI_High : int;
  Flow_Rate_High : int;
  Flow_Rate_Low : int;
  Flow_Rate : int;
  Flow_Rate_Not_Stable : bool;
  Air_In_Line : bool;
  Occlusion : bool;
  Door_Open : bool;
  Temp : bool;
  Air_Pressure : bool;
  Humidity : bool;
  Battery_Depleted : bool;
  Battery_Low : bool;
  Battery_Unable_To_Charge : bool;
  Supply_Voltage : bool;
  CPU_In_Error : bool;
  RTC_In_Error : bool;
  Watchdog_Interrupted : bool;
  Memory_Corrupted : bool;
  Pump_Too_Hot : bool;
  Pump_Overheated : bool;
  Audio_Enable_Duration : int;
  Audio_Level : int;
  Config_Warning_Duration : int;
  Low_Reservoir : int;
  Max_Duration_Over_Infusion : int;
  Max_Duration_Under_Infusion : int;
  Max_Paused_Duration : int;
  Max_Idle_Duration : int;
  Tolerance_Max : int;
  Tolerance_Min : int;
  Reservoir_Empty : bool;
  Reservoir_Volume : int;
  Volume_Infused : int;
  In_Therapy : bool;
  Config_Timer : int;
  out_Is_Audio_Disabled : int;
  out_Notification_Message : int;
  out_Audio_Notification_Command : int;
  out_Highest_Level_Alarm : int;
  out_Log_Message_ID5 : int
) returns (
  p1 : bool
);
let
  --%MAIN;
  p1 = ((((out_Highest_Level_Alarm > 4) xor (out_Highest_Level_Alarm > 5)) and (Disable_Audio > 0)) => ((out_Audio_Notification_Command < Audio_Level) and (out_Is_Audio_Disabled = 0)));

  assert (0 <= Commanded_Flow_Rate);

  assert (0 <= Current_System_Mode);

  assert (0 <= VTBI_High);

  assert (0 <= Flow_Rate_High);

  assert (0 <= Flow_Rate_Low);

  assert (0 <= Flow_Rate);

  assert (0 <= Audio_Enable_Duration);

  assert (0 <= Audio_Level);

  assert (0 <= Config_Warning_Duration);

  assert (0 <= Low_Reservoir);

  assert (0 <= Max_Duration_Over_Infusion);

  assert (0 <= Max_Duration_Under_Infusion);

  assert (0 <= Max_Paused_Duration);

  assert (0 <= Max_Idle_Duration);

  assert (0 <= Tolerance_Max);

  assert (0 <= Tolerance_Min);

  assert (0 <= Reservoir_Volume);

  assert (0 <= Volume_Infused);

  assert (0 <= Config_Timer);

  assert (0 <= out_Is_Audio_Disabled);

  assert (0 <= out_Notification_Message);

  assert (0 <= out_Audio_Notification_Command);

  assert (0 <= out_Highest_Level_Alarm);

  assert (0 <= out_Log_Message_ID5);

  assert (255 >= Commanded_Flow_Rate);

  assert (255 >= Current_System_Mode);

  assert (255 >= VTBI_High);

  assert (255 >= Flow_Rate_High);

  assert (255 >= Flow_Rate_Low);

  assert (255 >= Flow_Rate);

  assert (255 >= Audio_Enable_Duration);

  assert (255 >= Audio_Level);

  assert (255 >= Config_Warning_Duration);

  assert (255 >= Low_Reservoir);

  assert (255 >= Max_Duration_Over_Infusion);

  assert (255 >= Max_Duration_Under_Infusion);

  assert (255 >= Max_Paused_Duration);

  assert (255 >= Max_Idle_Duration);

  assert (255 >= Tolerance_Max);

  assert (255 >= Tolerance_Min);

  assert (255 >= Reservoir_Volume);

  assert (255 >= Volume_Infused);

  assert (255 >= Config_Timer);

  assert (255 >= out_Is_Audio_Disabled);

  assert (255 >= out_Notification_Message);

  assert (255 >= out_Audio_Notification_Command);

  assert (255 >= out_Highest_Level_Alarm);

  assert (255 >= out_Log_Message_ID5);

  --%PROPERTY p1;

tel;
