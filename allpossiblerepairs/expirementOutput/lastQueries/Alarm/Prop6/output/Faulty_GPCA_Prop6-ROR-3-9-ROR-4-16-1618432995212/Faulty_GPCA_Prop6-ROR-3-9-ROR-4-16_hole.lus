node T_node(
  Commanded_Flow_Rate : int;
  Current_System_Mode : int;
  System_On : bool;
  System_Monitor_Failed : bool;
  Logging_Failed : bool;
  Infusion_Initiate : bool;
  Disable_Audio : int;
  Notification_Cancel : bool;
  VTBI_High : int;
  Flow_Rate_High : int;
  Flow_Rate_Low : int;
  Flow_Rate : int;
  Flow_Rate_Not_Stable : bool;
  Air_In_Line : bool;
  Occlusion : bool;
  Door_Open : bool;
  Temp : bool;
  Air_Pressure : bool;
  Humidity : bool;
  Battery_Depleted : bool;
  Battery_Low : bool;
  Battery_Unable_To_Charge : bool;
  Supply_Voltage : bool;
  CPU_In_Error : bool;
  RTC_In_Error : bool;
  Watchdog_Interrupted : bool;
  Memory_Corrupted : bool;
  Pump_Too_Hot : bool;
  Pump_Overheated : bool;
  Audio_Enable_Duration : int;
  Audio_Level : int;
  Config_Warning_Duration : int;
  Low_Reservoir : int;
  Max_Duration_Over_Infusion : int;
  Max_Duration_Under_Infusion : int;
  Max_Paused_Duration : int;
  Max_Idle_Duration : int;
  Tolerance_Max : int;
  Tolerance_Min : int;
  Reservoir_Empty : bool;
  Reservoir_Volume : int;
  Volume_Infused : int;
  In_Therapy : bool;
  Config_Timer : int;
  out_Is_Audio_Disabled : int;
  out_Notification_Message : int;
  out_Audio_Notification_Command : int;
  out_Highest_Level_Alarm : int;
  out_Log_Message_ID5 : int;
  inner_hole_0_2 : int;
  const_hole_1_3 : int;
  inner_hole_0_0 : int;
  const_hole_1_1 : int
) returns (
  p1 : bool
);
let
  p1 = (((System_On and repairNode_142_0(out_Highest_Level_Alarm, inner_hole_0_0, const_hole_1_1)) and repairNode_31439_0(Disable_Audio, inner_hole_0_2, const_hole_1_3)) => ((out_Audio_Notification_Command < Audio_Level) and (out_Is_Audio_Disabled > 0)));

tel;

node repairNode_142_0(
  out_Highest_Level_Alarm : int;
  inner_hole_0_0 : int;
  const_hole_1_1 : int
) returns (
  R : bool
);
let
  R = (if (inner_hole_0_0 = 5) then ((out_Highest_Level_Alarm = const_hole_1_1) and ((const_hole_1_1 >= 0) and (const_hole_1_1 <= 255))) else (if (inner_hole_0_0 = 4) then ((out_Highest_Level_Alarm < const_hole_1_1) and ((const_hole_1_1 >= 0) and (const_hole_1_1 <= 255))) else (if (inner_hole_0_0 = 3) then ((out_Highest_Level_Alarm <= const_hole_1_1) and ((const_hole_1_1 >= 0) and (const_hole_1_1 <= 255))) else (if (inner_hole_0_0 = 2) then ((out_Highest_Level_Alarm > const_hole_1_1) and ((const_hole_1_1 >= 0) and (const_hole_1_1 <= 255))) else ((out_Highest_Level_Alarm >= const_hole_1_1) and ((const_hole_1_1 >= 0) and (const_hole_1_1 <= 255)))))));

tel;

node repairNode_31439_0(
  Disable_Audio : int;
  inner_hole_0_2 : int;
  const_hole_1_3 : int
) returns (
  R : bool
);
let
  R = (if (inner_hole_0_2 = 5) then ((Disable_Audio = const_hole_1_3) and ((const_hole_1_3 >= 0) and (const_hole_1_3 <= 2))) else (if (inner_hole_0_2 = 4) then ((Disable_Audio < const_hole_1_3) and ((const_hole_1_3 >= 0) and (const_hole_1_3 <= 2))) else (if (inner_hole_0_2 = 3) then ((Disable_Audio <= const_hole_1_3) and ((const_hole_1_3 >= 0) and (const_hole_1_3 <= 2))) else (if (inner_hole_0_2 = 2) then ((Disable_Audio > const_hole_1_3) and ((const_hole_1_3 >= 0) and (const_hole_1_3 <= 2))) else ((Disable_Audio >= const_hole_1_3) and ((const_hole_1_3 >= 0) and (const_hole_1_3 <= 2)))))));

tel;

node H_discovery(
  in : bool
) returns (
  out : bool
);
let
  out = (in -> (in and (pre out)));

tel;

node Check_spec(
  Commanded_Flow_Rate : int;
  Current_System_Mode : int;
  System_On : bool;
  System_Monitor_Failed : bool;
  Logging_Failed : bool;
  Infusion_Initiate : bool;
  Disable_Audio : int;
  Notification_Cancel : bool;
  VTBI_High : int;
  Flow_Rate_High : int;
  Flow_Rate_Low : int;
  Flow_Rate : int;
  Flow_Rate_Not_Stable : bool;
  Air_In_Line : bool;
  Occlusion : bool;
  Door_Open : bool;
  Temp : bool;
  Air_Pressure : bool;
  Humidity : bool;
  Battery_Depleted : bool;
  Battery_Low : bool;
  Battery_Unable_To_Charge : bool;
  Supply_Voltage : bool;
  CPU_In_Error : bool;
  RTC_In_Error : bool;
  Watchdog_Interrupted : bool;
  Memory_Corrupted : bool;
  Pump_Too_Hot : bool;
  Pump_Overheated : bool;
  Audio_Enable_Duration : int;
  Audio_Level : int;
  Config_Warning_Duration : int;
  Low_Reservoir : int;
  Max_Duration_Over_Infusion : int;
  Max_Duration_Under_Infusion : int;
  Max_Paused_Duration : int;
  Max_Idle_Duration : int;
  Tolerance_Max : int;
  Tolerance_Min : int;
  Reservoir_Empty : bool;
  Reservoir_Volume : int;
  Volume_Infused : int;
  In_Therapy : bool;
  Config_Timer : int;
  out_Is_Audio_Disabled : int;
  out_Notification_Message : int;
  out_Audio_Notification_Command : int;
  out_Highest_Level_Alarm : int;
  out_Log_Message_ID5 : int;
  inner_hole_0_2 : int;
  const_hole_1_3 : int;
  inner_hole_0_0 : int;
  const_hole_1_1 : int;
  k : int
) returns (
  p1 : bool
);
var
  step : int;
  stepOK : bool;
let
  step = (0 -> (1 + (pre step)));

  stepOK = (if (step <= k) then T_node(Commanded_Flow_Rate, Current_System_Mode, System_On, System_Monitor_Failed, Logging_Failed, Infusion_Initiate, Disable_Audio, Notification_Cancel, VTBI_High, Flow_Rate_High, Flow_Rate_Low, Flow_Rate, Flow_Rate_Not_Stable, Air_In_Line, Occlusion, Door_Open, Temp, Air_Pressure, Humidity, Battery_Depleted, Battery_Low, Battery_Unable_To_Charge, Supply_Voltage, CPU_In_Error, RTC_In_Error, Watchdog_Interrupted, Memory_Corrupted, Pump_Too_Hot, Pump_Overheated, Audio_Enable_Duration, Audio_Level, Config_Warning_Duration, Low_Reservoir, Max_Duration_Over_Infusion, Max_Duration_Under_Infusion, Max_Paused_Duration, Max_Idle_Duration, Tolerance_Max, Tolerance_Min, Reservoir_Empty, Reservoir_Volume, Volume_Infused, In_Therapy, Config_Timer, out_Is_Audio_Disabled, out_Notification_Message, out_Audio_Notification_Command, out_Highest_Level_Alarm, out_Log_Message_ID5, inner_hole_0_2, const_hole_1_3, inner_hole_0_0, const_hole_1_1) else true);

  p1 = ((step >= k) and H_discovery(stepOK));

tel;

node main(
  inner_hole_0_2 : int;
  const_hole_1_3 : int;
  inner_hole_0_0 : int;
  const_hole_1_1 : int
) returns (
  fail : bool
);
var
  Commanded_Flow_Rate0 : int;
  Current_System_Mode0 : int;
  System_On0 : bool;
  System_Monitor_Failed0 : bool;
  Logging_Failed0 : bool;
  Infusion_Initiate0 : bool;
  Disable_Audio0 : int;
  Notification_Cancel0 : bool;
  VTBI_High0 : int;
  Flow_Rate_High0 : int;
  Flow_Rate_Low0 : int;
  Flow_Rate0 : int;
  Flow_Rate_Not_Stable0 : bool;
  Air_In_Line0 : bool;
  Occlusion0 : bool;
  Door_Open0 : bool;
  Temp0 : bool;
  Air_Pressure0 : bool;
  Humidity0 : bool;
  Battery_Depleted0 : bool;
  Battery_Low0 : bool;
  Battery_Unable_To_Charge0 : bool;
  Supply_Voltage0 : bool;
  CPU_In_Error0 : bool;
  RTC_In_Error0 : bool;
  Watchdog_Interrupted0 : bool;
  Memory_Corrupted0 : bool;
  Pump_Too_Hot0 : bool;
  Pump_Overheated0 : bool;
  Audio_Enable_Duration0 : int;
  Audio_Level0 : int;
  Config_Warning_Duration0 : int;
  Low_Reservoir0 : int;
  Max_Duration_Over_Infusion0 : int;
  Max_Duration_Under_Infusion0 : int;
  Max_Paused_Duration0 : int;
  Max_Idle_Duration0 : int;
  Tolerance_Max0 : int;
  Tolerance_Min0 : int;
  Reservoir_Empty0 : bool;
  Reservoir_Volume0 : int;
  Volume_Infused0 : int;
  In_Therapy0 : bool;
  Config_Timer0 : int;
  out_00 : int;
  out_10 : int;
  out_20 : int;
  out_30 : int;
  out_40 : int;
  ok_0 : bool;
let
  --%MAIN;
  Commanded_Flow_Rate0 = 0;

  Current_System_Mode0 = 9;

  System_On0 = true;

  System_Monitor_Failed0 = true;

  Logging_Failed0 = true;

  Infusion_Initiate0 = true;

  Disable_Audio0 = 0;

  Notification_Cancel0 = true;

  VTBI_High0 = 0;

  Flow_Rate_High0 = 0;

  Flow_Rate_Low0 = 0;

  Flow_Rate0 = 0;

  Flow_Rate_Not_Stable0 = true;

  Air_In_Line0 = true;

  Occlusion0 = true;

  Door_Open0 = true;

  Temp0 = true;

  Air_Pressure0 = true;

  Humidity0 = true;

  Battery_Depleted0 = true;

  Battery_Low0 = true;

  Battery_Unable_To_Charge0 = true;

  Supply_Voltage0 = true;

  CPU_In_Error0 = true;

  RTC_In_Error0 = true;

  Watchdog_Interrupted0 = true;

  Memory_Corrupted0 = true;

  Pump_Too_Hot0 = true;

  Pump_Overheated0 = true;

  Audio_Enable_Duration0 = 0;

  Audio_Level0 = 1;

  Config_Warning_Duration0 = 0;

  Low_Reservoir0 = 1;

  Max_Duration_Over_Infusion0 = 0;

  Max_Duration_Under_Infusion0 = 0;

  Max_Paused_Duration0 = 0;

  Max_Idle_Duration0 = 2;

  Tolerance_Max0 = 0;

  Tolerance_Min0 = 21;

  Reservoir_Empty0 = true;

  Reservoir_Volume0 = 0;

  Volume_Infused0 = 1;

  In_Therapy0 = false;

  Config_Timer0 = 0;

  out_00 = 0;

  out_10 = 2;

  out_20 = 1;

  out_30 = 4;

  out_40 = 0;

  ok_0 = Check_spec(Commanded_Flow_Rate0, Current_System_Mode0, System_On0, System_Monitor_Failed0, Logging_Failed0, Infusion_Initiate0, Disable_Audio0, Notification_Cancel0, VTBI_High0, Flow_Rate_High0, Flow_Rate_Low0, Flow_Rate0, Flow_Rate_Not_Stable0, Air_In_Line0, Occlusion0, Door_Open0, Temp0, Air_Pressure0, Humidity0, Battery_Depleted0, Battery_Low0, Battery_Unable_To_Charge0, Supply_Voltage0, CPU_In_Error0, RTC_In_Error0, Watchdog_Interrupted0, Memory_Corrupted0, Pump_Too_Hot0, Pump_Overheated0, Audio_Enable_Duration0, Audio_Level0, Config_Warning_Duration0, Low_Reservoir0, Max_Duration_Over_Infusion0, Max_Duration_Under_Infusion0, Max_Paused_Duration0, Max_Idle_Duration0, Tolerance_Max0, Tolerance_Min0, Reservoir_Empty0, Reservoir_Volume0, Volume_Infused0, In_Therapy0, Config_Timer0, out_00, out_10, out_20, out_30, out_40, inner_hole_0_2, const_hole_1_3, inner_hole_0_0, const_hole_1_1, 0);

  fail = (not ok_0);

  assert (true -> (inner_hole_0_2 = (pre inner_hole_0_2)));

  assert (true -> (const_hole_1_3 = (pre const_hole_1_3)));

  assert (true -> (inner_hole_0_0 = (pre inner_hole_0_0)));

  assert (true -> (const_hole_1_1 = (pre const_hole_1_1)));

  --%PROPERTY fail;

tel;
